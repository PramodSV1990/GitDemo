<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="10" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-03-18T21:21:27 IST" name="Suite" finished-at="2024-03-18T21:21:28 IST" duration-ms="305">
    <groups>
      <group name="smoke">
        <method signature="First.mobileLogin()[pri:0, instance:test.First@57af006c]" name="mobileLogin" class="test.First"/>
        <method signature="Third.smokeFirst(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.Third@4310d43]" name="smokeFirst" class="test.Third"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2024-03-18T21:21:27 IST" name="HomeLoan" finished-at="2024-03-18T21:21:27 IST" duration-ms="132">
      <class name="test.Second">
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="beforeTest" finished-at="2024-03-18T21:21:27 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="beforemthd()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="beforemthd" finished-at="2024-03-18T21:21:27 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemthd -->
        <test-method signature="mobilecats()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="mobilecats" finished-at="2024-03-18T21:21:27 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobilecats -->
        <test-method is-config="true" signature="afteremthd()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="afteremthd" finished-at="2024-03-18T21:21:27 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afteremthd -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="afterTest" finished-at="2024-03-18T21:21:27 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- test.Second -->
      <class name="test.First">
        <test-method signature="generalLogin(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.First@57af006c]" started-at="2024-03-18T21:21:27 IST" name="generalLogin" finished-at="2024-03-18T21:21:27 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amazon.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[hloan]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[hpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generalLogin -->
        <test-method signature="mobileLogin()[pri:0, instance:test.First@57af006c]" started-at="2024-03-18T21:21:27 IST" name="mobileLogin" finished-at="2024-03-18T21:21:27 IST" duration-ms="13" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.First.mobileLogin(First.java:16)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLogin -->
      </class> <!-- test.First -->
    </test> <!-- HomeLoan -->
    <test started-at="2024-03-18T21:21:28 IST" name="carloan" finished-at="2024-03-18T21:21:28 IST" duration-ms="27">
      <class name="test.Third">
        <test-method is-config="true" signature="beforeFirst()[pri:0, instance:test.Third@4310d43]" started-at="2024-03-18T21:21:28 IST" name="beforeFirst" finished-at="2024-03-18T21:21:28 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeFirst -->
        <test-method signature="login(java.lang.String,java.lang.String)[pri:0, instance:test.Third@4310d43]" started-at="2024-03-18T21:21:28 IST" name="login" data-provider="getdata" finished-at="2024-03-18T21:21:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="login(java.lang.String,java.lang.String)[pri:0, instance:test.Third@4310d43]" started-at="2024-03-18T21:21:28 IST" name="login" data-provider="getdata" finished-at="2024-03-18T21:21:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="login(java.lang.String,java.lang.String)[pri:0, instance:test.Third@4310d43]" started-at="2024-03-18T21:21:28 IST" name="login" data-provider="getdata" finished-at="2024-03-18T21:21:28 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="smokeFirst(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.Third@4310d43]" started-at="2024-03-18T21:21:28 IST" name="smokeFirst" finished-at="2024-03-18T21:21:28 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[amazon.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[cloan]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[cpwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- smokeFirst -->
      </class> <!-- test.Third -->
      <class name="test.Second">
        <test-method is-config="true" signature="beforest()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:27 IST" name="beforest" finished-at="2024-03-18T21:21:27 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforest -->
        <test-method is-config="true" signature="afterst()[pri:0, instance:test.Second@22ef9844]" started-at="2024-03-18T21:21:28 IST" name="afterst" finished-at="2024-03-18T21:21:28 IST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterst -->
      </class> <!-- test.Second -->
    </test> <!-- carloan -->
  </suite> <!-- Suite -->
</testng-results>
